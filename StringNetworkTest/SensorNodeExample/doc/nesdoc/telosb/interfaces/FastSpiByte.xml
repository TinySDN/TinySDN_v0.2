<?xml version="1.0" encoding="utf-8"?><interfacedef loc="55:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc" nicename="FastSpiByte" qname="FastSpiByte">
      <documentation loc="35:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc">
        <short>
 This is a natural extension of the SpiByte interface which allows fast 
 data transfers comparable to the SpiStream interface.</short>
        <long>
 This is a natural extension of the SpiByte interface which allows fast 
 data transfers comparable to the SpiStream interface. You may want to
 use the following code sequence to write a buffer as fast as possible

	uint8_t *data;
	uint8_t *response;

	// start the first byte
	call FastSpiByte.splitWrite(data[0]);
	for(i = 1; i &lt; length; ++i) {
	   // finish the previous one and write the next one
	  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);
	}
	// finish the last byte
	response[length-1] = call FastSpiByte.splitRead();

 You can also do some useful computation (like calculate a CRC) while the
 hardware is sending the byte.
</long>
      </documentation>
      <function command="" loc="62:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc" name="splitWrite" provided="0" ref="0x2b61068532a0">
        <documentation loc="57:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc">
          <short>
 Starts a split-phase SPI data transfer with the given data.</short>
          <long>
 Starts a split-phase SPI data transfer with the given data.
 A splitRead/splitReadWrite command must follow this command even 
 if the result is unimportant.
</long>
        </documentation>
        <interfacedef-ref nicename="FastSpiByte" qname="FastSpiByte"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x2b6104f08160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="62:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc" name="data" ref="0x2b6106853020">
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x2b6104f08160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" loc="74:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc" name="splitReadWrite" provided="0" ref="0x2b6106851680">
        <documentation loc="70:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc">
          <short>
 This command first reads the SPI register and then writes
 there the new data, then returns.</short>
          <long>
 This command first reads the SPI register and then writes
 there the new data, then returns. 
</long>
        </documentation>
        <interfacedef-ref nicename="FastSpiByte" qname="FastSpiByte"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="uint8_t" ref="0x2b6104f08160"/></typename>
          </type-int>
          <function-parameters>
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x2b6104f08160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="74:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc" name="data" ref="0x2b6106851400">
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x2b6104f08160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" loc="68:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc" name="splitRead" provided="0" ref="0x2b6106853b10">
        <documentation loc="64:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc">
          <short>
 Finishes the split-phase SPI data transfer by waiting till 
 the write command comletes and returning the received data.</short>
          <long>
 Finishes the split-phase SPI data transfer by waiting till 
 the write command comletes and returning the received data.
</long>
        </documentation>
        <interfacedef-ref nicename="FastSpiByte" qname="FastSpiByte"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="uint8_t" ref="0x2b6104f08160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="81:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc" name="write" provided="0" ref="0x2b61068502a0">
        <documentation loc="76:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc">
          <short>
 This is the standard SpiByte.write command but a little
 faster as we should not need to adjust the power state there.</short>
          <long>
 This is the standard SpiByte.write command but a little
 faster as we should not need to adjust the power state there.
 (To be consistent, this command could have be named splitWriteRead).
</long>
        </documentation>
        <interfacedef-ref nicename="FastSpiByte" qname="FastSpiByte"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="uint8_t" ref="0x2b6104f08160"/></typename>
          </type-int>
          <function-parameters>
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x2b6104f08160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="81:/opt/tinyos-release-tinyos-2_1_2//tos/interfaces/FastSpiByte.nc" name="data" ref="0x2b6106850020">
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x2b6104f08160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>